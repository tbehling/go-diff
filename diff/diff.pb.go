// Code generated by protoc-gen-go. DO NOT EDIT.
// source: diff.proto

package diff

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	math "math"
	pbtypes "sourcegraph.com/sqs/pbtypes"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A FileDiff represents a unified diff for a single file.
//
// A file unified diff has a header that resembles the following:
//
//   --- oldname	2009-10-11 15:12:20.000000000 -0700
//   +++ newname	2009-10-11 15:12:30.000000000 -0700
type FileDiff struct {
	// the original name of the file
	OrigName string `protobuf:"bytes,1,opt,name=OrigName,proto3" json:"OrigName,omitempty"`
	// the original timestamp (nil if not present)
	OrigTime *pbtypes.Timestamp `protobuf:"bytes,2,opt,name=OrigTime,proto3" json:"OrigTime,omitempty"`
	// the new name of the file (often same as OrigName)
	NewName string `protobuf:"bytes,3,opt,name=NewName,proto3" json:"NewName,omitempty"`
	// the new timestamp (nil if not present)
	NewTime *pbtypes.Timestamp `protobuf:"bytes,4,opt,name=NewTime,proto3" json:"NewTime,omitempty"`
	// extended header lines (e.g., git's "new mode <mode>", "rename from <path>", etc.)
	Extended []string `protobuf:"bytes,5,rep,name=Extended,proto3" json:"Extended,omitempty"`
	// hunks that were changed from orig to new
	Hunks                []*Hunk  `protobuf:"bytes,6,rep,name=Hunks,proto3" json:"Hunks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileDiff) Reset()         { *m = FileDiff{} }
func (m *FileDiff) String() string { return proto.CompactTextString(m) }
func (*FileDiff) ProtoMessage()    {}
func (*FileDiff) Descriptor() ([]byte, []int) {
	return fileDescriptor_686521effc814b25, []int{0}
}

func (m *FileDiff) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileDiff.Unmarshal(m, b)
}
func (m *FileDiff) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileDiff.Marshal(b, m, deterministic)
}
func (m *FileDiff) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileDiff.Merge(m, src)
}
func (m *FileDiff) XXX_Size() int {
	return xxx_messageInfo_FileDiff.Size(m)
}
func (m *FileDiff) XXX_DiscardUnknown() {
	xxx_messageInfo_FileDiff.DiscardUnknown(m)
}

var xxx_messageInfo_FileDiff proto.InternalMessageInfo

func (m *FileDiff) GetOrigName() string {
	if m != nil {
		return m.OrigName
	}
	return ""
}

func (m *FileDiff) GetOrigTime() *pbtypes.Timestamp {
	if m != nil {
		return m.OrigTime
	}
	return nil
}

func (m *FileDiff) GetNewName() string {
	if m != nil {
		return m.NewName
	}
	return ""
}

func (m *FileDiff) GetNewTime() *pbtypes.Timestamp {
	if m != nil {
		return m.NewTime
	}
	return nil
}

func (m *FileDiff) GetExtended() []string {
	if m != nil {
		return m.Extended
	}
	return nil
}

func (m *FileDiff) GetHunks() []*Hunk {
	if m != nil {
		return m.Hunks
	}
	return nil
}

// A Hunk represents a series of changes (additions or deletions) in a file's
// unified diff.
type Hunk struct {
	// starting line number in original file
	OrigStartLine int32 `protobuf:"varint,1,opt,name=OrigStartLine,proto3" json:"OrigStartLine,omitempty"`
	// number of lines the hunk applies to in the original file
	OrigLines int32 `protobuf:"varint,2,opt,name=OrigLines,proto3" json:"OrigLines,omitempty"`
	// if > 0, then the original file had a 'No newline at end of file' mark at this offset
	OrigNoNewlineAt int32 `protobuf:"varint,3,opt,name=OrigNoNewlineAt,proto3" json:"OrigNoNewlineAt,omitempty"`
	// starting line number in new file
	NewStartLine int32 `protobuf:"varint,4,opt,name=NewStartLine,proto3" json:"NewStartLine,omitempty"`
	// number of lines the hunk applies to in the new file
	NewLines int32 `protobuf:"varint,5,opt,name=NewLines,proto3" json:"NewLines,omitempty"`
	// optional section heading
	Section string `protobuf:"bytes,6,opt,name=Section,proto3" json:"Section,omitempty"`
	// 0-indexed line offset in unified file diff (including section headers); this is
	// only set when Hunks are read from entire file diff (i.e., when ReadAllHunks is
	// called) This accounts for hunk headers, too, so the StartPosition of the first
	// hunk will be 1.
	StartPosition int32 `protobuf:"varint,7,opt,name=StartPosition,proto3" json:"StartPosition,omitempty"`
	// hunk body (lines prefixed with '-', '+', or ' ')
	Body                 []byte   `protobuf:"bytes,8,opt,name=Body,proto3" json:"Body,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Hunk) Reset()         { *m = Hunk{} }
func (m *Hunk) String() string { return proto.CompactTextString(m) }
func (*Hunk) ProtoMessage()    {}
func (*Hunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_686521effc814b25, []int{1}
}

func (m *Hunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Hunk.Unmarshal(m, b)
}
func (m *Hunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Hunk.Marshal(b, m, deterministic)
}
func (m *Hunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hunk.Merge(m, src)
}
func (m *Hunk) XXX_Size() int {
	return xxx_messageInfo_Hunk.Size(m)
}
func (m *Hunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Hunk.DiscardUnknown(m)
}

var xxx_messageInfo_Hunk proto.InternalMessageInfo

func (m *Hunk) GetOrigStartLine() int32 {
	if m != nil {
		return m.OrigStartLine
	}
	return 0
}

func (m *Hunk) GetOrigLines() int32 {
	if m != nil {
		return m.OrigLines
	}
	return 0
}

func (m *Hunk) GetOrigNoNewlineAt() int32 {
	if m != nil {
		return m.OrigNoNewlineAt
	}
	return 0
}

func (m *Hunk) GetNewStartLine() int32 {
	if m != nil {
		return m.NewStartLine
	}
	return 0
}

func (m *Hunk) GetNewLines() int32 {
	if m != nil {
		return m.NewLines
	}
	return 0
}

func (m *Hunk) GetSection() string {
	if m != nil {
		return m.Section
	}
	return ""
}

func (m *Hunk) GetStartPosition() int32 {
	if m != nil {
		return m.StartPosition
	}
	return 0
}

func (m *Hunk) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

// A Stat is a diff stat that represents the number of lines added/changed/deleted.
type Stat struct {
	// number of lines added
	Added int32 `protobuf:"varint,1,opt,name=Added,proto3" json:"Added,omitempty"`
	// number of lines changed
	Changed int32 `protobuf:"varint,2,opt,name=Changed,proto3" json:"Changed,omitempty"`
	// number of lines deleted
	Deleted int32 `protobuf:"varint,3,opt,name=Deleted,proto3" json:"Deleted,omitempty"`
	// line number intervals ("first-last") added, in "new" file
	AddedLineIntervals []*Stat_LineInterval `protobuf:"bytes,4,rep,name=AddedLineIntervals,proto3" json:"AddedLineIntervals,omitempty"`
	// line number intervals ("first-last") deleted, in "old" file
	DeletedLineIntervals []*Stat_LineInterval `protobuf:"bytes,5,rep,name=DeletedLineIntervals,proto3" json:"DeletedLineIntervals,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Stat) Reset()         { *m = Stat{} }
func (m *Stat) String() string { return proto.CompactTextString(m) }
func (*Stat) ProtoMessage()    {}
func (*Stat) Descriptor() ([]byte, []int) {
	return fileDescriptor_686521effc814b25, []int{2}
}

func (m *Stat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stat.Unmarshal(m, b)
}
func (m *Stat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stat.Marshal(b, m, deterministic)
}
func (m *Stat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stat.Merge(m, src)
}
func (m *Stat) XXX_Size() int {
	return xxx_messageInfo_Stat.Size(m)
}
func (m *Stat) XXX_DiscardUnknown() {
	xxx_messageInfo_Stat.DiscardUnknown(m)
}

var xxx_messageInfo_Stat proto.InternalMessageInfo

func (m *Stat) GetAdded() int32 {
	if m != nil {
		return m.Added
	}
	return 0
}

func (m *Stat) GetChanged() int32 {
	if m != nil {
		return m.Changed
	}
	return 0
}

func (m *Stat) GetDeleted() int32 {
	if m != nil {
		return m.Deleted
	}
	return 0
}

func (m *Stat) GetAddedLineIntervals() []*Stat_LineInterval {
	if m != nil {
		return m.AddedLineIntervals
	}
	return nil
}

func (m *Stat) GetDeletedLineIntervals() []*Stat_LineInterval {
	if m != nil {
		return m.DeletedLineIntervals
	}
	return nil
}

type Stat_LineInterval struct {
	// first line of interval
	Start int32 `protobuf:"varint,1,opt,name=Start,proto3" json:"Start,omitempty"`
	// last line of interval
	End                  int32    `protobuf:"varint,2,opt,name=End,proto3" json:"End,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Stat_LineInterval) Reset()         { *m = Stat_LineInterval{} }
func (m *Stat_LineInterval) String() string { return proto.CompactTextString(m) }
func (*Stat_LineInterval) ProtoMessage()    {}
func (*Stat_LineInterval) Descriptor() ([]byte, []int) {
	return fileDescriptor_686521effc814b25, []int{2, 0}
}

func (m *Stat_LineInterval) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Stat_LineInterval.Unmarshal(m, b)
}
func (m *Stat_LineInterval) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Stat_LineInterval.Marshal(b, m, deterministic)
}
func (m *Stat_LineInterval) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Stat_LineInterval.Merge(m, src)
}
func (m *Stat_LineInterval) XXX_Size() int {
	return xxx_messageInfo_Stat_LineInterval.Size(m)
}
func (m *Stat_LineInterval) XXX_DiscardUnknown() {
	xxx_messageInfo_Stat_LineInterval.DiscardUnknown(m)
}

var xxx_messageInfo_Stat_LineInterval proto.InternalMessageInfo

func (m *Stat_LineInterval) GetStart() int32 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Stat_LineInterval) GetEnd() int32 {
	if m != nil {
		return m.End
	}
	return 0
}

func init() {
	proto.RegisterType((*FileDiff)(nil), "diff.FileDiff")
	proto.RegisterType((*Hunk)(nil), "diff.Hunk")
	proto.RegisterType((*Stat)(nil), "diff.Stat")
	proto.RegisterType((*Stat_LineInterval)(nil), "diff.Stat.LineInterval")
}

func init() {
	proto.RegisterFile("diff.proto", fileDescriptor_686521effc814b25)
}

var fileDescriptor_686521effc814b25 = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0xe1, 0x8e, 0x93, 0x5c,
	0x10, 0x5d, 0x5a, 0x68, 0xbb, 0xb3, 0xfd, 0xf2, 0x99, 0x1b, 0xa3, 0x84, 0x18, 0x24, 0x8d, 0x3f,
	0x48, 0x54, 0x9a, 0xac, 0x4f, 0xb0, 0x75, 0xd7, 0x68, 0xa2, 0xa8, 0x74, 0x5f, 0x80, 0x96, 0x81,
	0xde, 0x58, 0xb8, 0x08, 0xb7, 0xd6, 0x7d, 0x03, 0x1f, 0xad, 0x3f, 0x7d, 0x00, 0x63, 0xb4, 0x3f,
	0x7d, 0x0a, 0x73, 0xe7, 0x42, 0x77, 0x31, 0x6b, 0xe2, 0xbf, 0x99, 0x73, 0x66, 0x0e, 0x73, 0xce,
	0x0d, 0x00, 0x09, 0x4f, 0xd3, 0xa0, 0xac, 0x84, 0x14, 0xcc, 0x54, 0xb5, 0xf3, 0x34, 0xe3, 0x72,
	0xb5, 0x59, 0x04, 0x4b, 0x91, 0x4f, 0x33, 0x91, 0x89, 0x29, 0x91, 0x8b, 0x4d, 0x4a, 0x1d, 0x35,
	0x54, 0xe9, 0x25, 0xe7, 0x71, 0x2d, 0x36, 0xd5, 0x12, 0xb3, 0x2a, 0x2e, 0x57, 0xb4, 0x53, 0x7f,
	0xac, 0xa7, 0xe5, 0x42, 0x5e, 0x95, 0x58, 0x4f, 0x25, 0xcf, 0xb1, 0x96, 0x71, 0x5e, 0xea, 0xe1,
	0xc9, 0x37, 0x03, 0x46, 0x2f, 0xf8, 0x1a, 0xcf, 0x79, 0x9a, 0x32, 0x07, 0x46, 0x6f, 0x2b, 0x9e,
	0x85, 0x71, 0x8e, 0xb6, 0xe1, 0x19, 0xfe, 0x71, 0x74, 0xe8, 0x59, 0xa0, 0xb9, 0x4b, 0x9e, 0xa3,
	0xdd, 0xf3, 0x0c, 0xff, 0xe4, 0x94, 0x05, 0x8d, 0x68, 0x70, 0xd9, 0x8a, 0x46, 0x87, 0x19, 0x66,
	0xc3, 0x30, 0xc4, 0x2d, 0x49, 0xf5, 0x49, 0xaa, 0x6d, 0xd9, 0x13, 0x62, 0x48, 0xc8, 0xfc, 0xab,
	0x50, 0x3b, 0xa2, 0x6e, 0xba, 0xf8, 0x2c, 0xb1, 0x48, 0x30, 0xb1, 0x2d, 0xaf, 0xaf, 0x6e, 0x6a,
	0x7b, 0xe6, 0x81, 0xf5, 0x72, 0x53, 0x7c, 0xa8, 0xed, 0x81, 0xd7, 0xf7, 0x4f, 0x4e, 0x21, 0xa0,
	0xe8, 0x14, 0x14, 0x69, 0x62, 0xf2, 0xa5, 0x07, 0xa6, 0xaa, 0xd8, 0x23, 0xf8, 0x4f, 0x9d, 0x36,
	0x97, 0x71, 0x25, 0x5f, 0xf3, 0x42, 0xfb, 0xb3, 0xa2, 0x2e, 0xc8, 0x1e, 0xc0, 0xb1, 0x02, 0x54,
	0x5d, 0x93, 0x4b, 0x2b, 0xba, 0x06, 0x98, 0x0f, 0xff, 0x53, 0x1c, 0x22, 0xc4, 0xed, 0x9a, 0x17,
	0x78, 0x26, 0xc9, 0x9a, 0x15, 0xfd, 0x09, 0xb3, 0x09, 0x8c, 0x43, 0xdc, 0x5e, 0x7f, 0xcc, 0xa4,
	0xb1, 0x0e, 0xa6, 0x8c, 0x85, 0xb8, 0xd5, 0x9f, 0xb2, 0x88, 0x3f, 0xf4, 0x2a, 0xbc, 0x39, 0x2e,
	0x25, 0x17, 0x85, 0x3d, 0xd0, 0xe1, 0x35, 0xad, 0xf2, 0x41, 0x12, 0xef, 0x44, 0xcd, 0x89, 0x1f,
	0x6a, 0x1f, 0x1d, 0x90, 0x31, 0x30, 0x67, 0x22, 0xb9, 0xb2, 0x47, 0x9e, 0xe1, 0x8f, 0x23, 0xaa,
	0x27, 0xbb, 0x1e, 0x98, 0x73, 0x19, 0x4b, 0xe6, 0x80, 0x75, 0x96, 0xa8, 0x38, 0x29, 0x82, 0x99,
	0xf9, 0xeb, 0xfb, 0xc3, 0xa3, 0x48, 0x43, 0xcc, 0x85, 0xe1, 0xf3, 0x55, 0x5c, 0x64, 0x98, 0x68,
	0xfb, 0x0d, 0xdb, 0x82, 0x8a, 0x3f, 0xc7, 0x35, 0x4a, 0x4c, 0xb4, 0xf5, 0x96, 0x6f, 0x40, 0xf6,
	0x06, 0x18, 0x09, 0x29, 0x1b, 0xaf, 0x0a, 0x89, 0xd5, 0xa7, 0x78, 0x5d, 0xdb, 0x26, 0x3d, 0xcf,
	0x7d, 0xfd, 0x3c, 0xea, 0x86, 0xe0, 0x26, 0xdf, 0x68, 0xdc, 0xb2, 0xc8, 0xde, 0xc3, 0xdd, 0x46,
	0xb9, 0x2b, 0x68, 0xfd, 0x8b, 0xe0, 0xad, 0xab, 0xce, 0x0c, 0xc6, 0x37, 0x01, 0x95, 0x06, 0x65,
	0xd7, 0x4d, 0x83, 0x20, 0x76, 0x0f, 0xfa, 0x17, 0x45, 0x37, 0x09, 0x05, 0xcc, 0xee, 0xec, 0x7e,
	0xba, 0x47, 0xbb, 0xbd, 0x6b, 0x7c, 0xdd, 0xbb, 0xc6, 0x8f, 0xbd, 0x6b, 0x2c, 0x06, 0xf4, 0x37,
	0x3d, 0xfb, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x97, 0x4f, 0x77, 0x0e, 0xbd, 0x03, 0x00, 0x00,
}
